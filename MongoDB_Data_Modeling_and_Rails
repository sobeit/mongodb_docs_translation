{alias:MongoDB Data Modeling and Rails}
based on v17 (2010/05/18 更新) - [オリジナル|MongoDB Data Modeling and Rails]
このチュートリアルではRailsとMongoDBを利用したWebアプリケーションの開発について述べます。&nbsp; MongoMapperはオブジェクトマッパーとなるものです。&nbsp; このチュートリアルの目的は、MongoDBを利用する場合に必要となるいくつかの設計上の選択肢を示すことです。&nbsp; そのために、ここでは単純ですが簡単ではんないソーシャルニュースのアプリケーションを作成します。[*newsmonger*のソースコード|http://github.com/banker/newsmonger]はすぐに利用できるように、github上で公開しています。

{toc}
アプリケーションがMongoMapperを利用できるよう設定されているものとして、データモデルについての考察を始めます。

h3. Modeling Stories

ニュースアプリケーションは記事が中心となるものですので、まずStoryモデルから始めようと思います。:
{code} class Story
include MongoMapper::Document

key :title, String
key :url, String
key :slug, String
key :voters, Array
key :votes, Integer, :default => 0
key :relevance, Integer, :default => 0

# Cached values.
key :comment_count, Integer, :default => 0
key :username, String

# Note this: ids are of class ObjectId.
key :user_id, ObjectId
timestamps!

# Relationships.
belongs_to :user

# Validations.
validates_presence_of :title, :url, :user_id
end
{code}当然ながら, 一つの記事にはタイトルと、URLと、ユーザIDが必要となり、そして一人のユーザに属している必要があります。これらは一目瞭然のことです。

h4. Caching to Avoid N+1

記事の一覧を表示する場合、記事を投稿したユーザの名前を示すようにする必要があります。もしリレーショナルデータベースを利用しているのであれば、usersとstoriesをジョインして、一つのクエリーで必要なすべてのオブジェクトを得ることができるでしょう。しかし、MongoDBはジョインをサポートしておらず、そのため、場合によっては、ちょっとした非正規化が必要となります。ここでは、それは'username'属性のキャッシングを意味します。

h4. A Note on Denormalization

リレーショナルの信奉者の方にしてみれば、一般的な法則を破ってしまっているかのような不安を感じているかもしれません。しかし、MongoDBのコレクションは、リレーショナルなテーブルと等価ではないということを留意しておきましょう；それぞれが固有の設計における目的を果たします。正規化されたテーブルはアトミックで、分離された一かたまりのデータを提供します。一方で、ドキュメントは対象を全体として、より密に示します。ソーシャルニュースサイトの例の場合は、ユーザ名が記事の投稿ということ自体に内包されているものと言うことができます。

ユーザ名の更新についてはどうでしょうか？その更新についてはコストがかかることになるのは確かです。;幸いなことに、この例の場合は、ユーザ名の更新はまれなはずです。非正規化によって達成される読み込みの効率化は、たまにしか行われない更新のコストより価値があるでしょう。ですが、これは厳格なルールというわけではありません。:最終的には開発者がそれぞれのアプリケーションにふさわしいレベルの正規化を判断しなければなりません。

h4. Fields as arrays

リレーショナルデータベースを利用する場合、どんな些細な関係も大げさに複数のテーブルに分割されます。記事への投票について考えてみましょう。どの記事にユーザが投票したのかを記録しておく手段が必要です。これを扱う通常の手段としては、各行でuser_idとstory_idを参照する、'votes'テーブルを作成することでしょう。

ドキュメントデータベースを利用する場合は、ここで'voters'キーで行うように、投票をユーザIDの配列として格納するのがより自然です。

高速な検索を実効するために、このフィールドにインデックスを作成することができます。MongoDBシェルで以下のように実行します。:

{code} db.stories.ensureIndex('voters');
{code}または、MongoMapperを利用しているなら、*config/initializers/database.rb*にインデックスの指定を設定することができます。:

{code} Story.ensure_index(:voters)
{code}特定のユーザが投票した記事一覧の検索は以下のようになります。:

{code} Story.all(:conditions => {:voters => @user.id})
{code}

h4. Atomic Updates

{{Story}}クラスに{{voters}}配列を持たせることで、アトミックな更新を利用できます。ここで、それがどのようなことを意味するかというと、ユーザがある記事に投票する場合、以下のようなことが可能となるということです。

1. 投票者がその記事にすでに投票しているのか、いないのかを特定し
2. 投票数を追加し
3. 新たな投票者を配列に追加する

MongoDBのクエリーと更新の特性は、一つのオペレーションで3つすべての実行を可能とします。ここでは、シェルからの実行で以下のようなオペレーションとなります。

{code}
// Assume that story_id and user_id represent real story and user ids.
db.stories.update({_id: story_id, voters: {'$ne': user_id}},
{'$inc': {votes: 1}, '$push': {voters: user_id}});
{code}

これがどのようなオペレーションかというと「指定した記事IDを持ち指定したユーザIDが投票者の配列に含まれない記事を特定し、もしそのような記事があれば、次の2つのアトミックな更新を実行する：最初に{{votes}}に1票追加し、{{voters}}配列に指定したユーザIDを追加する」というものです。

このオペレーションは非常に効率的です。；オペレーションは大概は信頼できるものです。1つ注意すべきこととしては、更新のオペレーションは"fire and forget"なものであるため、サーバからの返答を得ることができないことです。ですが、大概の場合は問題ないでしょう。

MongoMapperを利用して、同様の更新を実行する実装例としては以下に示すようなものになります。:
{code}
def self.upvote(story_id, user_id)
collection.update({'_id' => story_id, 'voters' => {'$ne' => user_id}},
{'$inc' => {'votes' => 1}, '$push' => {'voters' => user_id}})
end
{code}


h3. Modeling Comments

リレーショナルデータベースでは、コメントは、通常であれば、外部キーで親テーブルに関連付けられたそれ自体のテーブルが作成されます。この手法はMongoDBでも時折必要となります。;ですが、より優れたクエリーの効率性を引き出すのに、まずはドキュメントへの組込みを試みるのが常に最善です。

h4. Linear, Embedded Comments

リニアでスレッド化されないコメントは組み込まれるべきです。ここに示すのはそのような組込みの構造を実装する最も基本的なMongoMapperのクラスです。:

{code} class Story
include MongoMapper::Document
many :comments
end
{code}
{code} class Comment
include MongoMapper::EmbeddedDocument
key :body, String

belongs_to :story
end
{code}もしRubyドライバを単独で利用するなら、以下のようにこの構造で登録することができます。:
{code} @stories = @db.collection('stories')
@document = {:title => "MongoDB on Rails",
:comments => [{:body => "Revelatory! Loved it!",
:username => "Matz"
}
]
}
@stories.save(@document)
{code}基本的には、コメントは記事ドキュメントに含まれるオブジェクトの配列として表されます。このシンプルな構造は、多くの項目がリニアに示されるようなone-to-manyの関係に使われるでしょう。

h4. Nested, Embedded Comments

ではスレッド化されたコメントを作成する場合はどうなのでしょうか？確かにこれはより複雑な問題で、ここでは2つの解決方法を示しています。1つ目の方法は、コメントのネストをツリー構造で表現するものです。この方法はRubyドライバを利用すると、以下のように実現することになるでしょう。:

{code} @stories = @db.collection('stories')
@document = {:title => "MongoDB on Rails",
:comments => [{:body => "Revelatory! Loved it!",
:username => "Matz",
:comments => [{:body => "Agreed.",
:username => "rubydev29"
}
]
}
]
}
@stories.save(@document)
{code}MongoMapperを利用してこの構造を表現しようとすると、いくつかのカスタムモジュールが必要とされる、手の込んだ方法で行うことになります。

ですが、この構造にはいくつかの利点があります。ネストされたものは、ドキュメントの中にそれ自体を含められます(これは、実際に、[Business Insiderのコメントを表現するのにもちいられている方法です。|http://www.businessinsider.com/how-we-use-mongodb-2009-11])。また、このスキーマは、アプリケーション側の処理でツリー構造を作成することなしに、1つのクエリーですべてのコメントとともに記事を得ることができることによ、高いパフォーマンスを実現します。

1つの欠点としては、コメントツリーの表示方式にはいくつかの大幅な再構成が必要となることがあげられます。

h4. Comment collections

コメントはそれ自体のコレクションとして示すこともできます。他の選択肢と比べて、これはよりすばらしい柔軟性を得られる代わりに少しのパフォーマンス上の犠牲を払うことになります。ツリー構造はそれぞれのリーフへのユニークなパスを保存することで表現されます(このアイデアについての[Mathiasのオリジナルの投稿|http://groups.google.com/group/mongodb-user/browse_thread/thread/3e10a4b409dd6cb4/ccc9de1fafafe37e?lnk=gst&q=trees#ccc9de1fafafe37e]を参照のこと)。以下がこのモデルに関連する部分です。:

{code}class Comment
include MongoMapper::Document

key :body, String
key :depth, Integer, :default => 0
key :path, String, :default => ""

# Note: we're intentionally storing parent_id as a string
key :parent_id, String
key :story_id, ObjectId
timestamps!

# Relationships.
belongs_to :story

# Callbacks.
after_create :set_path

private

# Store the comment's path.
def set_path
unless self.parent_id.blank?
parent = Comment.find(self.parent_id)
self.story_id = parent.story_id
self.depth = parent.depth + 1
self.path = parent.path + ":" + parent.id
end
save
end
{code}このパスはオブジェクトIDの文字列表現で終わっています。これにより、関係性または投票に従った並びの各レベルのネストしたコメントを、より容易に表示させます。もしstory_id、path、そしてvotesにインデックスを貼っていれば、データベースはネストされ、ソートされたコメントの取得を半分のコストで実行できます。

The rest of the work can be accomplished with a couple grouping methods, which can be found in [the newsmonger source code|http://github.com/banker/newsmonger/blob/master/app/models/comment.rb].

It goes without saying that modeling comments in their own collection also facilitates various site-wide aggregations, including displaying the latest, grouping by user, etc.

h3. Unfinished business

Document-oriented data modeling is still young. The fact is, many more applications will need to be built on the document model before we can say anything definitive about best practices. So the foregoing should be taken as suggestions, only. As you discover new patterns, we encourage you to document them, and feel free to let us know about what works (and what doesn't).

Developers working on object mappers and the like are encouraged to implement the best document patterns in their code, and to be wary of recreating relational database models in their apps. 
